{"version":3,"sources":["components/Header.js","components/Form.js","components/Error.js","components/Weather.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","title","Form","cityRef","React","createRef","countryRef","searchWeather","e","preventDefault","resp","city","_this","current","value","country","dataQuery","currentTarget","reset","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Error","msg","Weather","showResult","_this$props$result","result","name","weather","main","iconURL","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","query","reqAPI","_this$state$query","url","fetch","then","json","data","setState","catch","err","console","prevProps","prevState","components_Error","cod","Weather_Weather","components_Header","Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAceA,EAZA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaC,KAAK,KAAML,EAAMM,WCL1CC,6MACjBC,QAAUC,IAAMC,cAChBC,WAAaF,IAAMC,cAEnBE,cAAgB,SAACC,GACbA,EAAEC,iBAGF,IAAMC,EAAO,CACTC,KAAMC,EAAKT,QAAQU,QAAQC,MAC3BC,QAASH,EAAKN,WAAWO,QAAQC,OAIrCF,EAAKjB,MAAMqB,UAAUN,GAGrBF,EAAES,cAAcC,iFAIhB,OACAtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,QAAMqB,SAAWC,KAAKb,eAClBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,SAAOuB,GAAG,OAAOC,KAAK,OAAOC,IAAMH,KAAKjB,UACxCP,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,QAAf,UAEJ5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,UAAQyB,IAAMH,KAAKd,YACfV,EAAAC,EAAAC,cAAA,UAAQ2B,cAAY,GAApB,oBACA7B,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,YACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,cACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,WACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,iBACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,aACAlB,EAAAC,EAAAC,cAAA,UAAQgB,MAAM,MAAd,SAEJlB,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,aAEnB5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACXH,EAAAC,EAAAC,cAAA,SACIwB,KAAK,SACLvB,UAAU,qDACVe,MAAM,uBA/CJY,aCcnBC,EAdD,SAAChC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACTJ,EAAMiC,SCNXC,6MACnBC,WAAa,WAAM,IAAAC,EACenB,EAAKjB,MAAMqC,OAAnCC,EADSF,EACTE,KAAMC,EADGH,EACHG,QAASC,EADNJ,EACMI,KAEvB,IAAIF,IAASC,IAAYC,EAAM,OAAO,KAEtC,IAAMC,EAAO,mCAAAC,OAAsCH,EAAQ,GAAGI,KAAjD,QAEPC,EAAG,YAAAF,OAAeJ,GAExB,OACIrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACZH,EAAAC,EAAAC,cAAA,yBAAkBmC,GAClBrC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,aACgBoC,EAAKK,KAV1B,QAUyCC,QAAQ,GAD5C,QAEI7C,EAAAC,EAAAC,cAAA,OAAK4C,IAAKN,EAASG,IAAKA,KAE5B3C,EAAAC,EAAAC,cAAA,kBAAWqC,EAAKQ,SAbrB,QAawCF,QAAQ,GAA3C,SACA7C,EAAAC,EAAAC,cAAA,kBAAWqC,EAAKS,SAdrB,QAcwCH,QAAQ,GAA3C,sFAQpB,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXqB,KAAKU,qBA/BsBJ,aCIhBmB,6MAEnBC,MAAQ,CACNC,OAAO,EACPC,MAAO,GACPtC,KAAM,MASRuC,OAAS,WAAM,IAAAC,EACatC,EAAKkC,MAAME,MAA7BrC,EADKuC,EACLvC,KAAMI,EADDmC,EACCnC,QAEd,IAAIJ,IAASI,EAAS,OAAO,KAE7B,IACIoC,EAAG,qDAAAd,OAAwD1B,EAAxD,KAAA0B,OAAgEtB,EAAhE,WAAAsB,OADQ,oCAGfe,MAAMD,GACHE,KAAK,SAAA3C,GAAU,OAAOA,EAAK4C,SAC3BD,KAAK,SAAAE,GACJ3C,EAAK4C,SAAS,CACZ9C,KAAM6C,MAGTE,MAAM,SAAAC,GAAG,OAAIC,QAAQZ,MAAMW,QAGhC1C,UAAY,SAACN,GACO,KAAdA,EAAKC,MAAgC,KAAjBD,EAAKK,QAC3BH,EAAK4C,SAAS,CACZT,OAAO,IAGTnC,EAAK4C,SAAS,CACZT,OAAO,EACPC,MAAOtC,uFAhCMkD,EAAWC,GACxBA,EAAUb,QAAU5B,KAAK0B,MAAME,OACjC5B,KAAK6B,0CAqCP,IAAIjB,EASJ,OAPEA,EADEZ,KAAK0B,MAAMC,MACJnD,EAAAC,EAAAC,cAACgE,EAAD,CAAOlC,IAAI,6BACa,QAAxBR,KAAK0B,MAAMpC,KAAKqD,IAChBnE,EAAAC,EAAAC,cAACgE,EAAD,CAAOlC,IAAI,0CAEXhC,EAAAC,EAAAC,cAACkE,EAAD,CAAShC,OAASZ,KAAK0B,MAAMpC,OAItCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmE,EAAD,CACEhE,MAAM,sBAERL,EAAAC,EAAAC,cAACoE,EAAD,CACElD,UAAYI,KAAKJ,YAEjBgB,UAhEuBN,aCMbyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.0a0e8949.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header>\n            <nav>\n                <div className=\"nav-wrapper light-blue darken-2\">\n                    <a className=\"brand-logo\" href=\"/\">{ props.title }</a>\n                </div>\n            </nav>\n        </header>\n    );\n};\n\nexport default Header;","import React, { Component } from 'react'\n\nexport default class Form extends Component {\n    cityRef = React.createRef();\n    countryRef = React.createRef();\n\n    searchWeather = (e) => {\n        e.preventDefault();\n\n        // refs and data object\n        const resp = {\n            city: this.cityRef.current.value,\n            country: this.countryRef.current.value\n        }\n\n        // send it in props\n        this.props.dataQuery(resp);\n\n        // clear the form\n        e.currentTarget.reset();\n    }\n\n    render() {\n        return (\n        <div className=\"contenedor-form\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <form onSubmit={ this.searchWeather }>\n                        <div className=\"input-field col s12 m8 l4 offset-m2\">\n                            <input id=\"city\" type=\"text\" ref={ this.cityRef }/>\n                            <label htmlFor=\"city\">City:</label>\n                        </div>\n                        <div className=\"input-field col s12 m8 l4 offset-m2\">\n                            <select ref={ this.countryRef }>\n                                <option defaultValue>Choose a country</option>\n                                <option value=\"AR\">Argentina</option>\n                                <option value=\"CO\">Colombia</option>\n                                <option value=\"CR\">Costa Rica</option>\n                                <option value=\"ES\">Spanish</option>\n                                <option value=\"US\">United States</option>\n                                <option value=\"MX\">MÃ©xico</option>\n                                <option value=\"PE\">Peru</option>\n                            </select>\n                            <label htmlFor=\"country\"></label>\n                        </div>\n                        <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\n                            <input \n                                type=\"submit\" \n                                className=\"waves-effect waves-light btn-large yellow accent-4\"\n                                value=\"Search\"\n                            />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n","import React from 'react';\n\nconst Error = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-m3\">\n                    <div className=\"card-panel red darken-4 error\">\n                        { props.msg }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Error;","import React, { Component } from 'react'\n\nexport default class Weather extends Component {\n  showResult = () => {\n    const { name, weather, main } = this.props.result;\n\n    if(!name || !weather || !main) return null;\n\n    const iconURL = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\n    const kelvin = 273.15;\n    const alt = `clima de ${name}`\n\n    return (\n        <div className=\"row\">\n            <div className=\"resultado col s12 m6 offset-m3\">\n                <div className=\"card-panel light-blue \">\n                    <span className=\"white-text\">\n                        <h2>Weather of: { name }</h2>\n                        <p className=\"temperatura\">\n                            Current: { (main.temp - kelvin).toFixed(2) }&deg;C\n                            <img src={iconURL} alt={alt}/>\n                        </p>\n                        <p>Max: { (main.temp_max - kelvin).toFixed(2) }&deg;C</p>\n                        <p>Min: { (main.temp_min - kelvin).toFixed(2) }&deg;C</p>\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        { this.showResult() }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Header from './Header';\nimport Form from './Form';\nimport Error from './Error';\nimport Weather from './Weather';\n\nexport default class App extends Component {\n\n  state = {\n    error: false,\n    query: {},\n    resp: {}\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.query !== this.state.query) {\n      this.reqAPI();\n    }\n  }\n\n  reqAPI = () => {\n    const { city, country } = this.state.query;\n\n    if(!city || !country) return null;\n\n    const APIKey = 'e04e8cdb238c4678ebcb63220ecb986d';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIKey}`;\n\n    fetch(url)\n      .then(resp => { return resp.json() })\n      .then(data => {\n        this.setState({\n          resp: data\n        })\n      })\n      .catch(err => console.error(err));\n  }\n  \n  dataQuery = (resp) => {\n    if (resp.city === '' || resp.country === '') {\n      this.setState({\n        error: true\n      });\n    } else {\n      this.setState({\n        error: false,\n        query: resp\n      });\n    }\n  }\n\n  render() {\n\n    let result;\n    if (this.state.error) {\n      result = <Error msg=\"Both fields are required\"/>\n    } else if (this.state.resp.cod === '404') {\n      result = <Error msg=\"The requested city doesn't even exist\"/>\n    } else {\n      result = <Weather result={ this.state.resp }/>\n    }\n\n    return (\n      <div className=\"app\">\n        <Header\n          title=\"Weather React App\"\n        />\n        <Form\n          dataQuery={ this.dataQuery }\n        />\n        { result }\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}